const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Trendivision_old", function () {
    let [accountA, accountB, accountC] =[]
    let token
    let amount = ethers.utils.parseUnits("100","ether")
    let address0 = "0x0000000000000000000000000000000000000000"
    let totalSupply = ethers.utils.parseUnits("1000000","ether")
    beforeEach(async () => {
        [accountA, accountB, accountC] = await ethers.getSigners();
        const Token = await ethers.getContractFactory("Trendivision_ol");
        token = await Token.deploy();
        await token.deployed()
    })

    describe("Common", function () {
      it("total supply should return right value", async function() {
          expect(await token.totalSupply()).to.be.equal(totalSupply);
      });
      it("Balance of account A should return right value", async function() {
          expect(await token.balanceOf(accountA.address)).to.be.equal(totalSupply);
      });
      it("Balance of account B should return right value", async function() {
          expect(await token.balanceOf(accountB.address)).to.be.equal(0);
      });
      it("Allowance of A to B should return right value", async function() {
          expect(await token.allowance(accountA.address,accountB.address)).to.be.equal(0);
      });
  })
    describe("pause", function () {
      it("should rever if not pauser role", async function() {
        await expect(token.connect(accountB).pause()).to.be.reverted
      });
      it("should revert if contract has been paused", async function() {
        await token.pause()
        await expect(token.pause()).to.be.revertedWith("Pausable: paused");
      });
      it("should pause contract correctly", async function() {
        const pauseTx = await token.pause()
        await expect(pauseTx).to.be.emit(token, "Paused").withArgs(accountA.address)
        await expect(token.transfer(accountB.address,amount)).to.be.revertedWith("Pausable: pause")
      });
  })
})
